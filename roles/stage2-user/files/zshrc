#!/bin/zsh
# shellcheck disable=SC1090 disable=SC2034 disable=SC2206

HISTFILE="$HOME/.zhistory"              # Save history.
HISTSIZE=7500                           # Lines of history to keep in memory.
SAVEHIST=5000                           # Lines of history to save to a file.

setopt ALWAYS_TO_END                    # Move cursor after completion.
setopt APPEND_HISTORY                   # Append to $HISTFILE, not replace.
setopt AUTO_LIST                        # List choices on ambiguous completion.
setopt AUTO_MENU                        # Show completion menu on tab press.
setopt AUTO_NAME_DIRS                   # Allows 'cd ~borntyping' (see below).
setopt AUTO_PARAM_KEYS                  # Intelligent handling of characters
setopt AUTO_PARAM_SLASH                 #   after a completion.
setopt AUTO_REMOVE_SLASH                # Remove trailing slash when needed.
setopt COMPLETE_ALIASES                 # Allow autocompletion for aliases.
setopt COMPLETE_IN_WORD                 # Allow completion from middle of word.
setopt EXTENDED_HISTORY                 # Record additional information.
setopt HIST_EXPIRE_DUPS_FIRST           # Remove duplicate entries first.
setopt HIST_FIND_NO_DUPS                # Never find duplicates when searching.
setopt HIST_IGNORE_ALL_DUPS             # Remove old duplicate entries first.
setopt HIST_IGNORE_DUPS                 # Ignore adjacent repeated entries.
setopt HIST_IGNORE_SPACE                # Skip if the line starts with space.
setopt HIST_SAVE_NO_DUPS                # Never save duplicate commands.
setopt HIST_VERIFY                      # Don't immediately run history commands.
setopt INC_APPEND_HISTORY               # Append to $HISTFILE while running.
setopt INTERACTIVE_COMMENTS             # Allow comments in interactive mode.
setopt LIST_PACKED                      # Smallest completion menu.
setopt RM_STAR_WAIT                     # Force the user to wait before 'rm *'.
setopt SHARE_HISTORY                    # Share history between ZSH instances.
unsetopt FLOW_CONTROL                   # Disable start/stop characters.
unsetopt MENU_COMPLETE                  # Don't autoselect completions.

autoload edit-command-line
zle -N edit-command-line

bindkey '\e[3~' delete-char             # Ensure Delete works as expected.
bindkey '^[[F' end-of-line              # Ensure End works as expected.
bindkey '^[[H' beginning-of-line        # Ensure Home works as expected.
bindkey '^[[Z' reverse-menu-complete    # Shift-Tab to go back in menus.
bindkey '^e' edit-command-line          # Edit current line (Ctrl+e).
bindkey -r "^V"                         # Disable `ctrl-v` so it does not mix with `ctrl-shift-v`.

alias bat='batcat'                      # Ubuntu's executable is 'batcat' instead of 'bat'.
alias cola='git-cola 2>/dev/null &'     # The 'git-cola' executable often prints QT warnings.
alias db='docker run --rm --interactive --tty $(docker build --quiet --tag=db .)'
alias gc='git commit'
alias gca='git commit -a'
alias gd='git diff'
alias gitg='gitg 2>/dev/null &'
alias grep='grep --color=auto'
alias gs='git status'
alias la='ls -la'
alias ll='ls -l'
alias reconfigure-git='reconfigure -t git'
alias reconfigure-ssh='reconfigure -t ssh'
alias reconfigure-zshrc='reconfigure -t zshrc; source ~/.zshrc'

export EDITOR="micro"                                                           # https://micro-editor.github.io/
export PAGER="bat"                                                              # https://github.com/sharkdp/bat

export BAT_PAGER="less --quit-if-one-screen --RAW-CONTROL-CHARS"                # Don't use a pager for short files, just echo them.
export BAT_STYLE="plain"                                                        # Minimal UI when using bat as a pager. Just does code highlighting.
export DOCKER_HOST="unix:///run/user/${UID}/podman/podman.sock"                 # Make docker-compose work with rootless podman.
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window wrap"              # Show preview window and wrap text. Useful for long commands.
export NPM_CONFIG_PREFIX="${HOME}/.npm"                                         # https://docs.npmjs.com/cli/v7/configuring-npm/folders#prefix-configuration
export PIPENV_DONT_LOAD_ENV=1                                                   # Direnv manages our '.env', tell Pipenv not to load it.
export PIPENV_IGNORE_VIRTUALENVS=1                                              # Don't try and detect running in an existing Python virtualenv.
export PIPENV_VENV_IN_PROJECT=1                                                 # Place Pipenv virtualenvs in '.venv' directories.
export VIRTUAL_ENV_DISABLE_PROMPT=1                                             # My personal prompt has it's own display for Python virtualenvs.

export PATH="${HOME}/.cargo/bin:${PATH}"
export PATH="${HOME}/.npm/bin:${PATH}"
export PATH="${HOME}/.krew/bin:${PATH}"
export PATH="${HOME}/.bin:${HOME}/.local/bin:${HOME}/.local/share/src/:${PATH}"

# 2.5.7: Named directories
# http://zsh.sourceforge.net/Guide/zshguide02.html
export source="${HOME}/Development"
export borntyping="${source}/github.com/borntyping"
export github="${source}/github.com"
export gitlab="${source}/gitlab.com"
export scratch="${source}/scratch"

# Completion rules
# https://zsh.sourceforge.net/Doc/Release/Completion-System.html
# https://github.com/Aloxaf/fzf-tab/wiki/Configuration
fpath+=("${HOME}/.cache/zsh/functions")
autoload -Uz compinit
zstyle ':completion:*:*:*:*:*' menu select                                      # Select completions with an interactive menu.
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"                         # Set list-colors to enable filename colorizing.
zstyle ':completion:*:descriptions' format '[%d]'                               # Set descriptions format to enable group support.
zstyle ':completion:*:git-checkout:*' sort false                                # Disable sort when completing `git checkout`.
zstyle -e ':completion:*:hosts' hosts 'reply=()'
compinit -C

# Completion for kubectl aliases.
# https://kubernetes.io/docs/tasks/tools/install-kubectl/#enabling-shell-autocompletion
function k()  { kubectl "$@"; }
function kj() { kubectl --output="json" "$@"; }
function ky() { kubectl --output="yaml" "$@" | bat --language="yaml"; }
if [[ -x "$(command -v bat)" ]]; then
  compdef k=kubectl
  compdef kj=kubectl
  compdef ky=kubectl
fi

# ZSH plugins using miniplug
# https://git.sr.ht/~yerinalexey/miniplug
source "$HOME/.local/share/zsh/miniplug.zsh"
miniplug plugin 'ajeetdsouza/zoxide'
miniplug plugin 'zsh-users/zsh-completions'
miniplug load

# Atuin
# https://github.com/ellie/atuin/blob/main/docs/key-binding.md
if [[ "$+commands[atuin]" -eq 1 ]]; then
  export ATUIN_NOBIND="true"
  eval "$(atuin init zsh)"
  bindkey '^r' _atuin_search_widget
fi

# Direnv
# https://direnv.net/
eval "$(direnv hook zsh)"

# Replace various coreutils executables with oreutils alternatives.
# https://github.com/Manishearth/oreutils
[[ -x "$(command -v bat)" ]] && alias cat='bat'
[[ -x "$(command -v exa)" ]] && alias ls='exa'
[[ -x "$(command -v rg)" ]] && alias grep='rg'

# Load personal prompt configuration
source "$HOME/.local/share/zsh/prompt.zsh"

# Load machine-local configuration.
for conf in "$HOME/.config/zsh/zshrc.d/"*.zsh; do
  source "${conf}"
done

if [[ "$TERMINAL_EMULATOR" == "JetBrains-JediTerm" ]]; then
  echo "Not loading full profile, running inside a JetBrains IDE."
  return
fi

# # Command-line fuzzy finder
# # https://github.com/junegunn/fzf
# source "/usr/share/fzf/shell/key-bindings.zsh"

# ZSH automatic completion ('^ ' is Ctrl+Space)
# https://github.com/zsh-users/zsh-autosuggestions
source "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
bindkey '^ ' autosuggest-accept

# Tilix VTE fix
# https://gnunn1.github.io/tilix-web/manual/vteconfig/
[[ -f '/etc/profile.d/vte-2.91.sh' ]] && source '/etc/profile.d/vte-2.91.sh'

# ZSH syntax highlighting plugin (should be loaded last)
# https://github.com/zsh-users/zsh-syntax-highlighting
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
export ZSH_HIGHLIGHT_STYLES['comment']='fg=green'
export ZSH_HIGHLIGHT_STYLES['unknown-token']='fg=red'
export ZSH_HIGHLIGHT_STYLES['globbing']='fg=cyan'
export ZSH_HIGHLIGHT_STYLES['single-quoted-argument']='fg=blue'
export ZSH_HIGHLIGHT_STYLES['double-quoted-argument']='fg=blue'
export ZSH_HIGHLIGHT_STYLES['dollar-double-quoted-argument']='fg=yellow'
export ZSH_HIGHLIGHT_STYLES['back-double-quoted-argument']='fg=yellow'
