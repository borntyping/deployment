#!/usr/bin/env python3.10

import dataclasses
import pathlib
import subprocess
import sys
import typing


def print_alert(text: str, *, fg: str, symbol: str, width: int = 80 + 9) -> None:
    if sys.stdout.isatty():
        text = f"%(start)s {symbol} {text:{width-4}} %(end)s"
        text = text % {
            "b": "\033[1m",  # bold
            "n": "\033[22m",  # normal
            "start": "\033[0;47;{}m".format(fg),
            "end": "\033[0m",
        }
    else:
        text = f"{symbol} {text}"
        text = text % {"b": "", "n": ""}

    print(text)


def print_start(text: str) -> None:
    print_alert(text, fg="30", symbol="➔")


def print_failure(text: str) -> None:
    print_alert(text, fg="31", symbol="!")


def print_failure_note(text: str) -> None:
    print_alert(text, fg="39", symbol=" ")


def print_success(text: str) -> None:
    print_alert(text, fg="32", symbol="➔")


@dataclasses.dataclass()
class Hook:
    group: str
    name: str

    def __str__(self) -> str:
        return self.name

    def __call__(self) -> str | None:
        print_start(f"Running %(b)s{self}%(n)s.")
        return self.run()

    @staticmethod
    def git_hook_enabled(name: str) -> bool | None:
        command = ("git", "config", "--get", "--type", "bool", f"hooks.{name}")
        result = subprocess.run(command, capture_output=True, encoding="utf-8")

        if result.returncode == 0 and result.stdout.strip() == "true":
            return True
        elif result.returncode == 0 and result.stdout.strip() == "false":
            return False
        elif result.returncode == 1:
            return None

        raise Exception(f"Unexpected result from 'git config' ({result}).")

    def enabled(self) -> bool:
        ...

    def run(self) -> str | None:
        ...


@dataclasses.dataclass()
class ExcludeHook(Hook):
    pattern: str

    def enabled(self) -> bool:
        return self.git_hook_enabled(self.name) is not False

    def run(self) -> str | None:
        """
        * 'git diff HEAD' to include staged and unstaged changes.
        * 'git diff --unified=0' so we don't look at unchanged lines.
        """
        result = subprocess.run(
            ("git", "diff", "HEAD", "--unified=0"),
            capture_output=True,
            encoding="utf-8",
            env={"PAGER": "cat"},
        )

        if result.returncode != 0:
            return None

        if self.pattern in result.stdout:
            return f"commit diff includes {self.pattern!r}"

        return None


@dataclasses.dataclass()
class CommandHook(Hook):
    command: typing.Sequence[str]
    present: typing.Sequence[str] = ()
    absent: typing.Sequence[str] = ()

    def enabled(self) -> bool:
        enabled = self.git_hook_enabled(self.name)
        present = (pathlib.Path(filename).exists() for filename in self.present)
        absent = (pathlib.Path(filename).exists() for filename in self.absent)
        return (enabled is True) or (
            enabled is None and all(present) and not any(absent)
        )

    def run(self) -> str | None:
        try:
            subprocess.run(self.command, check=True, encoding="utf-8")
        except subprocess.CalledProcessError as error:
            return f"return code was {error.returncode}"
        except FileNotFoundError as error:
            return f"{error}"
        return None


hooks = [
    ExcludeHook("diff", "exclude", "!nocommit"),
    CommandHook(
        "python",
        "black",
        [".venv/bin/black", "--check", "."],
        ["pyproject.toml"],
        [".pre-commit-config.yaml"],
    ),
    CommandHook(
        "python",
        "flake8",
        [".venv/bin/flake8", "."],
        [".flake8"],
        [".pre-commit-config.yaml"],
    ),
    CommandHook(
        "python",
        "mypy",
        [".venv/bin/mypy"],
        ["pyproject.toml"],
        [".pre-commit-config.yaml"],
    ),
    CommandHook(
        "python",
        "pytest",
        [".venv/bin/pytest"],
        ["pyproject.toml"],
        [".pre-commit-config.yaml"],
    ),
    CommandHook("python", "tox", ["tox"], ["tox.ini"]),
    CommandHook("php", "phpunit", ["vendor/bin/phpunit"], ["vendor/bin/phpunit"]),
    CommandHook("php", "phpstan", ["vendor/bin/phpstan"], ["vendor/bin/phpstan"]),
    CommandHook("docs", "mkdocs", ["mkdocs", "build", "--strict"], ["mkdocs.yml"]),
    CommandHook(
        "pre-commit",
        "pre-commit",
        ["pre-commit", "run", "-a"],
        [".pre-commit-config.yaml"],
    ),
]

if __name__ == "__main__":
    results = [(hook, hook()) for hook in hooks if hook.enabled()]
    failed = [(hook, error) for hook, error in results if error]

    if failed:
        for hook, error in failed:
            print_failure(f"Hook %(b)s{hook}%(n)s failed: {error}.")
            command = f"git config --type=bool hooks.{hook.name} false"
            print_failure_note(f"Run '{command}' to disable.%(b)s%(n)s")
        raise SystemExit(1)

    print_success(f"Successfully ran %(b)s{len(results)}%(n)s pre-commit hooks.")
