#!/usr/bin/env python3.10

import dataclasses
import pathlib
import subprocess
import typing


def bg_red(text: str) -> str:
    return f"\033[0;37;41m{text}\033[0m"


def bg_magenta(text: str) -> str:
    return f"\033[0;37;45m{text}\033[0m"


def bold(text: str) -> str:
    return f"\033[0;1;37;45m{text}\033[0;37;45m"


def file_exists(filename: str) -> bool:
    return pathlib.Path(filename).exists()


@dataclasses.dataclass()
class Hook:
    name: str

    def __call__(self) -> bool:
        print(self.git_hook_description(self.name))

        result = self.run()
        if not result:
            print(bg_red(f" ! Hook {self.name} failed. "))

        return result

    @staticmethod
    def git_hook_description(name: str) -> str:
        command = f"git config --type=bool hooks.{name} false"
        return bg_magenta(f" âž” Running {bold(name)}. Run '{command}' to disable. ")

    @staticmethod
    def git_hook_enabled(name: str) -> bool:
        command = ("git", "config", "--get", "--type", "bool", f"hooks.{name}")
        result = subprocess.run(command, capture_output=True, encoding="utf-8")
        return result.returncode == 1 or result.stdout.strip() == "true"

    def enabled(self) -> bool:
        ...

    def run(self) -> bool:
        ...


@dataclasses.dataclass()
class ExcludeHook(Hook):
    pattern: str

    def enabled(self) -> bool:
        return self.git_hook_enabled(self.name)

    def run(self) -> bool:
        command = ("git", "commit", "--verbose", "--dry-run")
        result = subprocess.run(command, capture_output=True, encoding="utf-8")

        if result.returncode != 0:
            return True

        if self.pattern in result.stdout:
            print(f"Commit diff includes {self.pattern!r}")
            return False

        return True


@dataclasses.dataclass()
class CommandHook(Hook):
    command: typing.Sequence[str]
    files: typing.Sequence[str]

    def enabled(self) -> bool:
        enabled = self.git_hook_enabled(self.name)
        configured = all(pathlib.Path(filename).exists() for filename in self.files)
        return enabled and configured

    def run(self) -> bool:
        result = subprocess.run(self.command, encoding="utf-8")
        return result.returncode == 0


if __name__ == "__main__":
    hooks = [
        ExcludeHook(
            "exclude",
            pattern="!ncommit",
        ),
        CommandHook(
            "mkdocs",
            command=["mkdocs", "build", "--strict"],
            files=["mkdocs.yml"],
        ),
        CommandHook(
            "black",
            command=["poetry", "run", "black", "--check", "--diff", "."],
            files=["pyproject.toml"],
        ),
        CommandHook(
            "mypy",
            command=["poetry", "run", "mypy", "."],
            files=["pyproject.toml"],
        ),
        CommandHook(
            "pytest",
            command=["poetry", "run", "pytest"],
            files=["pyproject.toml"],
        ),
        CommandHook(
            "phpunit",
            command=["vendor/bin/phpunit"],
            files=["vendor/bin/phpunit"],
        ),
        CommandHook(
            "phpstan",
            command=["vendor/bin/phpstan"],
            files=["vendor/bin/phpstan"],
        ),
        CommandHook(
            "pre-commit",
            command=["pre-commmit", "run", "-a"],
            files=[".pre-commit-config.yaml"],
        ),
    ]

    if not all(hook() for hook in hooks if hook.enabled()):
        raise SystemExit(1)
